{
  "version": 3,
  "sources": ["../../../src/services/users/users.ts"],
  "sourcesContent": ["import type { QueryResolvers, MutationResolvers } from 'types/graphql';\n\nimport { db } from 'src/lib/db';\n\nexport const users: QueryResolvers['users'] = () => {\n  return db.user.findMany();\n};\n\nexport const user: QueryResolvers['user'] = ({ id }) => {\n  return db.user.findUnique({\n    where: { id },\n  });\n};\n\nexport const createUser: MutationResolvers['createUser'] = ({ input }) => {\n  return db.user.create({\n    data: input,\n  });\n};\n\nexport const updateUser: MutationResolvers['updateUser'] = ({ id, input }) => {\n  return db.user.update({\n    data: input,\n    where: { id },\n  });\n};\n\nexport const deleteUser: MutationResolvers['deleteUser'] = ({ id }) => {\n  return db.user.delete({\n    where: { id },\n  });\n};\n\nexport const verifyUser: MutationResolvers['verifyUser'] = async ({\n  token,\n}) => {\n  const user = await db.user.findFirst({ where: { verificationToken: token } });\n  if (user) {\n    return db.user.update({\n      where: { id: user.id },\n      data: { verificationToken: null, isVerified: true },\n    });\n  } else {\n    throw new Error('Token not found');\n  }\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;AAEA;;;;;;;;;;gBAAW;AAEJ,MAAMA,QAAiCA,MAAM;AAClD,SAAOC,aAAGC,KAAKC,SAAQ;AACzB;AAEO,MAAMD,OAA+BA,CAAC;EAAEE;AAAG,MAAM;AACtD,SAAOH,aAAGC,KAAKG,WAAW;IACxBC,OAAO;MAAEF;IAAG;EACd,CAAC;AACH;AAEO,MAAMG,aAA8CA,CAAC;EAAEC;AAAM,MAAM;AACxE,SAAOP,aAAGC,KAAKO,OAAO;IACpBC,MAAMF;EACR,CAAC;AACH;AAEO,MAAMG,aAA8CA,CAAC;EAAEP;EAAII;AAAM,MAAM;AAC5E,SAAOP,aAAGC,KAAKU,OAAO;IACpBF,MAAMF;IACNF,OAAO;MAAEF;IAAG;EACd,CAAC;AACH;AAEO,MAAMS,aAA8CA,CAAC;EAAET;AAAG,MAAM;AACrE,SAAOH,aAAGC,KAAKY,OAAO;IACpBR,OAAO;MAAEF;IAAG;EACd,CAAC;AACH;AAEO,MAAMW,aAA8C,OAAO;EAChEC;AACF,MAAM;AACJ,QAAMd,QAAO,MAAMD,aAAGC,KAAKe,UAAU;IAAEX,OAAO;MAAEY,mBAAmBF;IAAM;EAAE,CAAC;AAC5E,MAAId,OAAM;AACR,WAAOD,aAAGC,KAAKU,OAAO;MACpBN,OAAO;QAAEF,IAAIF,MAAKE;MAAG;MACrBM,MAAM;QAAEQ,mBAAmB;QAAMC,YAAY;MAAK;IACpD,CAAC;EACH,OAAO;AACL,UAAM,IAAIC,MAAM,iBAAiB;EACnC;AACF;",
  "names": ["users", "db", "user", "findMany", "id", "findUnique", "where", "createUser", "input", "create", "data", "updateUser", "update", "deleteUser", "delete", "verifyUser", "token", "findFirst", "verificationToken", "isVerified", "Error"]
}
