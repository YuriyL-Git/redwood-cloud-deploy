{
  "version": 3,
  "sources": ["../../../src/functions/auth/auth.ts"],
  "sourcesContent": ["import { randomUUID } from 'node:crypto';\n\nimport type { APIGatewayProxyEvent, Context } from 'aws-lambda';\nimport { User } from 'types/graphql';\n\nimport {\n  DbAuthHandler,\n  DbAuthHandlerOptions,\n} from '@redwoodjs/auth-dbauth-api';\n\nimport { isDevelopment } from 'src/consts/env';\nimport { db } from 'src/lib/db';\nimport { sendMail } from 'src/lib/nodemailer/nodemailer';\nimport { user } from 'src/services/users/users';\n\nexport const handler = async (\n  event: APIGatewayProxyEvent,\n  context: Context\n) => {\n  const forgotPasswordOptions: DbAuthHandlerOptions['forgotPassword'] = {\n    // handler() is invoked after verifying that a user was found with the given\n    // username. This is where you can send the user an email with a link to\n    // reset their password. With the default dbAuth routes and field names, the\n    // URL to reset the password will be:\n    //\n    // https://example.com/reset-password?resetToken=${user.resetToken}\n    //\n    // Whatever is returned from this function will be returned from\n    // the `forgotPassword()` function that is destructured from `useAuth()`\n    // You could use this return value to, for example, show the email\n    // address in a toast message so the user will know it worked and where\n    // to look for the email.\n    handler: (user: User) => {\n      sendMail({\n        from: process.env.DOMAIN_NAME,\n        subject: 'Reset password link',\n        receivers: [user.email],\n        htmlBody: `<a href=\"https://${process.env.DOMAIN_NAME}/reset-password/${user.resetToken}\">Click here to reset Your password</a>`,\n      });\n      return user;\n    },\n\n    // How long the resetToken is valid for, in seconds (default is 24 hours)\n    expires: 60 * 60 * 24,\n\n    errors: {\n      // for security reasons you may want to be vague here rather than expose\n      // the fact that the email address wasn't found (prevents fishing for\n      // valid email addresses)\n      usernameNotFound: 'Username not found',\n      // if the user somehow gets around client validation\n      usernameRequired: 'Username is required',\n    },\n  };\n\n  const loginOptions: DbAuthHandlerOptions['login'] = {\n    // handler() is called after finding the user that matches the\n    // username/password provided at login, but before actually considering them\n    // logged in. The `user` argument will be the user in the database that\n    // matched the username/password.\n    //\n    // If you want to allow this user to log in simply return the user.\n    //\n    // If you want to prevent someone logging in for another reason (maybe they\n    // didn't validate their email yet), throw an error and it will be returned\n    // by the `logIn()` function from `useAuth()` in the form of:\n    // `{ message: 'Error message' }`\n    handler: (user: User) => {\n      console.log('IS VERIFIED =', user.isVerified);\n      if (!user.isVerified) {\n        throw new Error('User e-mail is not verified!');\n      }\n\n      return user;\n    },\n\n    errors: {\n      usernameOrPasswordMissing: 'Both username and password are required',\n      usernameNotFound: 'Username ${username} not found',\n      // For security reasons you may want to make this the same as the\n      // usernameNotFound error so that a malicious user can't use the error\n      // to narrow down if it's the username or password that's incorrect\n      incorrectPassword: 'Incorrect password for ${username}',\n    },\n\n    // How long a user will remain logged in, in seconds\n    expires: 60 * 60 * 24 * 365 * 10,\n  };\n\n  const resetPasswordOptions: DbAuthHandlerOptions['resetPassword'] = {\n    // handler() is invoked after the password has been successfully updated in\n    // the database. Returning anything truthy will automatically log the user\n    // in. Return `false` otherwise, and in the Reset Password page redirect the\n    // user to the login page.\n    handler: (_user) => {\n      return true;\n    },\n\n    // If `false` then the new password MUST be different from the current one\n    allowReusedPassword: true,\n\n    errors: {\n      // the resetToken is valid, but expired\n      resetTokenExpired: 'resetToken is expired',\n      // no user was found with the given resetToken\n      resetTokenInvalid: 'resetToken is invalid',\n      // the resetToken was not present in the URL\n      resetTokenRequired: 'resetToken is required',\n      // new password is the same as the old password (apparently they did not forget it)\n      reusedPassword: 'Must choose a new password',\n    },\n  };\n\n  const signupOptions: DbAuthHandlerOptions['signup'] = {\n    // Whatever you want to happen to your data on new user signup. Redwood will\n    // check for duplicate usernames before calling this handler. At a minimum\n    // you need to save the `username`, `hashedPassword` and `salt` to your\n    // user table. `userAttributes` contains any additional object members that\n    // were included in the object given to the `signUp()` function you got\n    // from `useAuth()`.\n    //\n    // If you want the user to be immediately logged in, return the user that\n    // was created.\n    //\n    // If this handler throws an error, it will be returned by the `signUp()`\n    // function in the form of: `{ error: 'Error message' }`.\n    //\n    // If this returns anything else, it will be returned by the\n    // `signUp()` function in the form of: `{ message: 'String here' }`.\n\n    handler: async ({ username, hashedPassword, salt, userAttributes }) => {\n      const verificationToken = randomUUID();\n\n      await db.user.create({\n        data: {\n          email: username,\n          hashedPassword: hashedPassword,\n          salt: salt,\n          verificationToken,\n          // name: userAttributes.name\n        },\n      });\n\n      sendMail({\n        from: process.env.DOMAIN_NAME,\n        subject: 'Verification link',\n        receivers: [username],\n        htmlBody: `<a href=\"https://${process.env.DOMAIN_NAME}/verification/${verificationToken}\">Click here to verify Your e-mail</a>`,\n      });\n\n      return 'Please confirm your e-mail to be able to login';\n    },\n\n    // Include any format checks for password here. Return `true` if the\n    // password is valid, otherwise throw a `PasswordValidationError`.\n    // Import the error along with `DbAuthHandler` from `@redwoodjs/api` above.\n    passwordValidation: (_password) => {\n      return true;\n    },\n\n    errors: {\n      // `field` will be either \"username\" or \"password\"\n      fieldMissing: '${field} is required',\n      usernameTaken: 'Username `${username}` already in use',\n    },\n  };\n\n  const authHandler = new DbAuthHandler(event, context, {\n    // Provide prisma db client\n    db: db,\n    cors: {\n      origin: isDevelopment ? '*' : `*.${process.env.DOMAIN_NAME}`,\n      credentials: true,\n    },\n\n    // The name of the property you'd call on `db` to access your user table.\n    // i.e. if your Prisma model is named `User` this value would be `user`, as in `db.user`\n    authModelAccessor: 'user',\n\n    // A map of what dbAuth calls a field to what your database calls it.\n    // `id` is whatever column you use to uniquely identify a user (probably\n    // something like `id` or `userId` or even `email`)\n    authFields: {\n      id: 'id',\n      username: 'email',\n      hashedPassword: 'hashedPassword',\n      salt: 'salt',\n      resetToken: 'resetToken',\n      resetTokenExpiresAt: 'resetTokenExpiresAt',\n    },\n\n    // Specifies attributes on the cookie that dbAuth sets in order to remember\n    // who is logged in. See https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#restrict_access_to_cookies\n    cookie: {\n      HttpOnly: true,\n      Path: '/',\n      SameSite: 'Strict',\n      Secure: !isDevelopment,\n\n      // If you need to allow other domains (besides the api side) access to\n      // the dbAuth session cookie:\n      Domain: isDevelopment ? 'localhost' : `${process.env.DOMAIN_NAME}`,\n    },\n\n    forgotPassword: forgotPasswordOptions,\n    login: loginOptions,\n    resetPassword: resetPasswordOptions,\n    signup: signupOptions,\n  });\n\n  return await authHandler.invoke();\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;AAAA;;;;;yBAA2B;AAK3B,6BAGO;AAEP,iBAAsB;AACtB,gBAAW;AACX,wBAAiB;AAGV,MAAMA,UAAU,OACrBC,OACAC,YACG;AACH,QAAMC,wBAAgE;;;;;;;;;;;;;IAapEH,SAAUI,UAAe;AACvBC,sCAAS;QACPC,MAAMC,QAAQC,IAAIC;QAClBC,SAAS;QACTC,WAAW,CAACP,KAAKQ,KAAK;QACtBC,UAAW,oBAAmBN,QAAQC,IAAIC,8BAA8BL,KAAKU;MAC/E,CAAC;AACD,aAAOV;IACT;;IAGAW,SAAS,KAAK,KAAK;IAEnBC,QAAQ;;;;MAINC,kBAAkB;;MAElBC,kBAAkB;IACpB;EACF;AAEA,QAAMC,eAA8C;;;;;;;;;;;;IAYlDnB,SAAUI,UAAe;AACvBgB,cAAQC,IAAI,iBAAiBjB,KAAKkB,UAAU;AAC5C,UAAI,CAAClB,KAAKkB,YAAY;AACpB,cAAM,IAAIC,MAAM,8BAA8B;MAChD;AAEA,aAAOnB;IACT;IAEAY,QAAQ;MACNQ,2BAA2B;MAC3BP,kBAAkB;;;;MAIlBQ,mBAAmB;IACrB;;IAGAV,SAAS,KAAK,KAAK,KAAK,MAAM;EAChC;AAEA,QAAMW,uBAA8D;;;;;IAKlE1B,SAAU2B,WAAU;AAClB,aAAO;IACT;;IAGAC,qBAAqB;IAErBZ,QAAQ;;MAENa,mBAAmB;;MAEnBC,mBAAmB;;MAEnBC,oBAAoB;;MAEpBC,gBAAgB;IAClB;EACF;AAEA,QAAMC,gBAAgD;;;;;;;;;;;;;;;;IAiBpDjC,SAAS,OAAO;MAAEkC;MAAUC;MAAgBC;MAAMC;IAAe,MAAM;AACrE,YAAMC,wBAAoBC,+BAAU;AAEpC,YAAMC,aAAGpC,KAAKqC,OAAO;QACnBC,MAAM;UACJ9B,OAAOsB;UACPC;UACAC;UACAE;;QAEF;MACF,CAAC;AAEDjC,sCAAS;QACPC,MAAMC,QAAQC,IAAIC;QAClBC,SAAS;QACTC,WAAW,CAACuB,QAAQ;QACpBrB,UAAW,oBAAmBN,QAAQC,IAAIC,4BAA4B6B;MACxE,CAAC;AAED,aAAO;IACT;;;;IAKAK,oBAAqBC,eAAc;AACjC,aAAO;IACT;IAEA5B,QAAQ;;MAEN6B,cAAc;MACdC,eAAe;IACjB;EACF;AAEA,QAAMC,cAAc,IAAIC,qCAAc/C,OAAOC,SAAS;;IAEpDsC,IAAIA;IACJS,MAAM;MACJC,QAAQC,2BAAgB,MAAO,KAAI5C,QAAQC,IAAIC;MAC/C2C,aAAa;IACf;;;IAIAC,mBAAmB;;;;IAKnBC,YAAY;MACVC,IAAI;MACJrB,UAAU;MACVC,gBAAgB;MAChBC,MAAM;MACNtB,YAAY;MACZ0C,qBAAqB;IACvB;;;IAIAC,QAAQ;MACNC,UAAU;MACVC,MAAM;MACNC,UAAU;MACVC,QAAQ,CAACV;;;MAITW,QAAQX,2BAAgB,cAAe,GAAE5C,QAAQC,IAAIC;IACvD;IAEAsD,gBAAgB5D;IAChB6D,OAAO7C;IACP8C,eAAevC;IACfwC,QAAQjC;EACV,CAAC;AAED,SAAO,MAAMc,YAAYoB,OAAM;AACjC;",
  "names": ["handler", "event", "context", "forgotPasswordOptions", "user", "sendMail", "from", "process", "env", "DOMAIN_NAME", "subject", "receivers", "email", "htmlBody", "resetToken", "expires", "errors", "usernameNotFound", "usernameRequired", "loginOptions", "console", "log", "isVerified", "Error", "usernameOrPasswordMissing", "incorrectPassword", "resetPasswordOptions", "_user", "allowReusedPassword", "resetTokenExpired", "resetTokenInvalid", "resetTokenRequired", "reusedPassword", "signupOptions", "username", "hashedPassword", "salt", "userAttributes", "verificationToken", "randomUUID", "db", "create", "data", "passwordValidation", "_password", "fieldMissing", "usernameTaken", "authHandler", "DbAuthHandler", "cors", "origin", "isDevelopment", "credentials", "authModelAccessor", "authFields", "id", "resetTokenExpiresAt", "cookie", "HttpOnly", "Path", "SameSite", "Secure", "Domain", "forgotPassword", "login", "resetPassword", "signup", "invoke"]
}
